@page "/field"
@using CostManager.Pwa.Models
@using CostManager.Pwa.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@inject IFieldService FieldService

<h3>Field Management</h3>

@if (Fields == null)
{
    <p>Loading fields...</p>
}
else
{
    <div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Days</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var field in Fields)
            {
                <tr>
                    <td class="align-middle">@field.Name</td>
                    <td class="align-middle">@FormatDaysOfWeek(field.Days)</td>
                    <td class="align-middle">
                        <a href="/edit/@field.Id" class="btn btn-link text-center d-inline-block" style="width: 40px;"><i class="fa fa-edit"></i></a>
                    </td>
                    <td class="align-middle">
                        <button class="btn btn-link text-danger text-center d-inline-block" style="width: 40px;" @onclick="() => ShowConfirmationPopup(field.Id)"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


    @code {
        // Existing code...

        private string FormatDaysOfWeek(List<string> daysOfWeek)
        {
            return string.Join(", ", daysOfWeek);
        }

        private async Task ShowConfirmationPopup(int fieldId)
        {
            // Show confirmation popup and call API delete if confirmed
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this field?" });
            if (confirmed)
            {
                await FieldService.DeleteField(fieldId);
                Fields = await FieldService.GetFields();
            }
        }
    }
}

@code {
    List<Field> Fields;

    protected override async Task OnInitializedAsync()
    {
        @* Fields = await Http.GetFromJsonAsync<List<Field>>("api/Field"); *@

        Fields = new List<Field>
        {
            new Field { Id = 1, Name = "Dummy Field 1", Location = "Location 1", Days = new List<string> { "Monday", "Wednesday" }, TimePerDay = 2 },
            new Field { Id = 2, Name = "Dummy Field 2", Location = "Location 2", Days = new List<string> { "Tuesday", "Thursday" }, TimePerDay = 1 }
        };
    }

    private void EditField(int fieldId)
    {
        NavigationManager.NavigateTo($"/field/{fieldId}");
    }

    private async Task DeleteField(int fieldId)
    {
        await Http.DeleteAsync($"api/Field/{fieldId}");
        Fields = await Http.GetFromJsonAsync<List<Field>>("api/Field");
    }
}
